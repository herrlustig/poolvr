{"name":"poolvr","tagline":"Play pool / billiards in VR with your LeapMotion device, in a web browser!","body":"## Obtaining the latest WebVR-enabled browsers:\r\n\r\n- Mozilla Firefox supports WebVR in its nightly builds, [see MozVR for more info](http://mozvr.com)\r\n\r\n- [WebVR-enabled builds of Chrome / Chromium](http://blog.tojicode.com/2014/07/bringing-vr-to-chrome.html)\r\n\r\n\r\n\r\n## How to run locally (tested under (64 bit) Windows 7, Windows 10, Ubuntu 14, Fedora 22):\r\n\r\n### Method A (serving the static file `index.html`):\r\n\r\n1. Start a Python HTTP server in the root directory:\r\n    - using Python 2: `python -m SimpleHTTPServer`\r\n    - using Python 3: `python -m http.server`\r\n2. Point your browser to `http://localhost:8000` (desktop tracking) or `http://localhost:8000?vr=1` (VR tracking)\r\n\r\n### Method B (Flask application serving dynamically generated HTML):\r\n\r\nThis method requires some extra Python packages.  I recommend using the [Miniconda Python distribution](http://conda.pydata.org/miniconda.html), which will let you easily install the Python dependencies.\r\n\r\n1. Run the Python script `flask_app.py`: `python flask_app.py`\r\n2. Point your browser to `http://127.0.0.1:5000` (desktop tracking) or `http://127.0.0.1:5000?vr=1` (VR tracking)\r\n\r\nThe Flask application is configured to also serve any file within the project tree (nice for local development, but probably a bad idea to deploy to an actual web server).\r\nFor instance, you can access the static `index.html` that you would obtain with method A via `http://127.0.0.1:5000/index.html`.\r\n\r\n\r\n\r\n## Desktop and VR tracking modes:\r\n\r\nThe default stick tracking mode (aka 'desktop') assumes that the LeapMotion sensor is stationary, facing up.\r\n\r\nThe VR stick tracking mode assumes that the sensor is [mounted to your HMD](https://developer.leapmotion.com/vr-setup).\r\nCurrently this mode is selected using a `vr` URL parameter, e.g. you would point your browser to `http://127.0.0.1:5000?vr=1`.\r\n\r\n\r\n\r\n## TODO list:\r\n\r\n- Cannon.js model for the pockets, not sure what the best approach is\r\n- Run-time tracking mode toggling\r\n- Ball labels, more balls\r\n- Select friction, collision response physics parameters\r\n- Hand interactions\r\n\r\n\r\n\r\n## Acknowledgements:\r\n\r\nThe following amazing open-source projects have helped make **poolvr** possible:\r\n\r\nJavaScript libraries:\r\n  - [three.js](https://github.com/mrdoob/three.js)\r\n  - [Cannon.js](https://github.com/schteppe/cannon.js)\r\n  - [Primrose](https://github.com/capnmidnight/Primrose)\r\n  - [webvr-boilerplate](https://github.com/borismus/webvr-boilerplate)\r\n\r\nPython packages:\r\n  - [Flask](http://flask.pocoo.org/)\r\n  - [NumPy](http://www.numpy.org)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}